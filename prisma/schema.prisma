// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model User {
  id           String        @id @default(uuid())
  displayName  String?       @db.VarChar(32)
  username     String        @unique @db.VarChar(32)
  password     String
  bio          String?       @db.VarChar(255)
  profileImage profileImage?
  createdAt    DateTime      @default(now())
  followedBy   Follows[]     @relation("following")
  following    Follows[]     @relation("followedBy")
  posts        Post[]
  comments     Comment[]
  replies      Reply[]
  repliesBy    Reply[]       @relation("replyTo")
  liked        Like[]
}

model Follows {
  followedBy   User   @relation("followedBy", fields: [followedById], references: [id])
  followedById String
  following    User   @relation("following", fields: [followingId], references: [id])
  followingId  String

  @@id([followingId, followedById])
}

model Like {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  likesBox   LikesBox @relation(fields: [likesBoxId], references: [id])
  likesBoxId String
}

model LikesBox {
  id        String       @id @default(uuid())
  type      LikesBoxType
  likes     Like[]
  post      Post?        @relation(fields: [postId], references: [id])
  postId    String?      @unique
  comment   Comment?     @relation(fields: [commentId], references: [id])
  commentId String?      @unique
  reply     Reply?       @relation(fields: [replyId], references: [id])
  replyId   String?      @unique
}

model Reply {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  replyTo   User      @relation("replyTo", fields: [replyToId], references: [id])
  replyToId String
  author    User      @relation(fields: [authorid], references: [id])
  authorid  String
  comment   Comment   @relation(fields: [commentId], references: [id])
  commentId String
  children  Reply[]   @relation("reply")
  parent    Reply?    @relation("reply", fields: [parentId], references: [id])
  parentId  String?
  likesBox  LikesBox?
  content   String    @db.VarChar(2048)
  post      Post?     @relation(fields: [postId], references: [id])
  postId    String?
}

model Comment {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorid], references: [id])
  authorid  String
  post      Post      @relation(fields: [postId], references: [id])
  postId    String
  likesBox  LikesBox?
  replies   Reply[]
  content   String    @db.VarChar(2048)
}

model profileImage {
  id         String  @id @default(uuid())
  bannerUrl  String?
  pictureUrl String?
  user       User    @relation(fields: [userId], references: [id])
  userId     String  @unique
}

model Image {
  id     String @id @default(uuid())
  post   Post   @relation(fields: [postId], references: [id])
  postId String
  url    String
}

model Post {
  id        String    @id @default(uuid())
  author    User      @relation(fields: [authorid], references: [id])
  authorid  String
  thumbnail String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  likesBox  LikesBox?
  comments  Comment[]
  content   Image[]
  replies   Reply[]
  caption   String    @db.VarChar(2048)
}

enum LikesBoxType {
  COMMENT
  POST
  REPLY
}
