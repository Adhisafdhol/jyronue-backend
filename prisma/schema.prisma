// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model User {
  id         String    @id @default(uuid())
  username   String    @unique @db.VarChar(32)
  password   String
  followedBy Follows[] @relation("followedBy")
  following  Follows[] @relation("following")
  posts      Post[]
  comments   Comment[]
  replies    Reply[]
  liked      Like[]
}

model Follows {
  followedBy   User   @relation("followedBy", fields: [followedById], references: [id])
  followedById String
  following    User   @relation("following", fields: [followingId], references: [id])
  followingId  String

  @@id([followingId, followedById])
}

model Like {
  id         String   @id @default(uuid())
  author     User     @relation(fields: [authorid], references: [id])
  authorid   String
  likesBox   LikesBox @relation(fields: [likesBoxId], references: [id])
  likesBoxId String
}

model LikesBox {
  id        String       @id @default(uuid())
  type      LikesBoxType
  likes     Like[]
  post      Post?        @relation(fields: [postId], references: [id])
  postId    String?      @unique
  comment   Comment?     @relation(fields: [commentId], references: [id])
  commentId String?      @unique
  reply     Reply?       @relation(fields: [replyId], references: [id])
  replyId   String?      @unique
}

model Reply {
  id        String    @id @default(uuid())
  author    User      @relation(fields: [authorid], references: [id])
  authorid  String
  comment   Comment   @relation(fields: [commentId], references: [id])
  commentId String
  likesBox  LikesBox?
  content   String
}

model Comment {
  id       String    @id @default(uuid())
  author   User      @relation(fields: [authorid], references: [id])
  authorid String
  post     Post      @relation(fields: [postId], references: [id])
  postId   String
  likesBox LikesBox?
  replies  Reply[]
  content  String
}

model Image {
  id     String @id @default(uuid())
  post   Post   @relation(fields: [postId], references: [id])
  postId String
  url    String
}

model Post {
  id        String    @id @default(uuid())
  author    User      @relation(fields: [authorid], references: [id])
  authorid  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  likesBox  LikesBox?
  comments  Comment[]
  content   Image[]
  caption   String
}

enum LikesBoxType {
  COMMENT
  POST
  REPLY
}
